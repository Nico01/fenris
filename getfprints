#!/bin/bash
#
#  fenris - program execution path analysis tool
#  ---------------------------------------------
#
#  Copyright (C) 2001, 2002 by Bindview Corporation
#  Portions Copyright (C) 2001, 2002 by their respective contributors
#  Developed and maintained by Michal Zalewski <lcamtuf@coredump.cx>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

TRYLIBS="
    libc.a
    libm.a
    libdl.a
    libresolv.a
    libreadline.a
    libtermcap.a
    libssl.a
    libBrokenLocale.a
    libcrypt.a
"

# various machines, stock, x86_64, arm emulation, raspberry pi (raspian)
TRYPATHS="
    /usr/lib
    /usr/lib/x86_64-linux-gnu
    /usr/lib/arm-none-eabi
    /usr/lib/arm-linux-gnueabihf
"

OUTFILE=NEW-fnprints.dat

usage()
{
    cat <<-EOF
Usage: $(basename $0) [options] [libraries]

    libraries    optional libraries to scan

    -q | --quiet don't display banners
    -f | --force force overwriting existing ${OUTFILE}
    -h | --help  show this usage info

$(basename $0) pulls library fingerprints from a preset list of libraries,
or a list given on command line, outputting results info '${OUTFILE}'.
EOF
    exit 2
}

QUIET=0
FORCE=0

args=$(getopt --name "$0" --options "qfh" --longoptions "quiet,force,help" -- "$@")
if [ $? -gt 0 ]; then
    usage
    exit 1
fi
eval set -- "${args}"
#
for arg; do
    case ${arg} in
        -q|--quiet) shift; QUIET=1;;
        -f|--force) shift; FORCE=1;;
        -h)         usage;; # never returns
        --)         shift; break;;
    esac
done

if [ -n "$1" ]; then
    TRYLIBS="$@"
fi

if [ ${QUIET} -eq 0 ]; then
    echo "auto library function signature collector for fenris -- <lcamtuf@coredump.cx>"
fi

LIBLIST=""
declare -i LIBCOUNT=0

# look for each file
for f in ${TRYLIBS}; do
    # in each path
    for p in "" ${TRYPATHS}; do
        if [ -f ${p}/${f} ]; then
            # saving the path/file combo when found
            LIBLIST="${LIBLIST} ${p}/${f}"
            LIBCOUNT=${LIBCOUNT}+1
            # but only the first one found
            break
        fi
    done
done

if [ ${LIBCOUNT} -eq 0 ]; then
    echo "No usable libraries found"
    exit 1
fi

# find fprints in path, or locally IF it exists and is exec'able
FPRINTS=$(which fprints || ( test -x ./fprints && echo ./fprints ) )

if [ -z "${FPRINTS}" ]; then
    echo "Cannot find 'fprints' in your path or in current directory."
    exit 1
fi

if [ -f ${OUTFILE} ] && [ ${FORCE} -eq 0 ]; then
    echo "Cowardly refusing to overwrite existing output file: '${OUTFILE}'"
    exit 1
fi

declare -i CURRENT_ARCHIVE=0
declare -i ARCHIVE_COUNT=0
declare -i FILE_COUNT=0
declare -i PERCENT=0

for LIB in ${LIBLIST}; do
    CURRENT_ARCHIVE=${CURRENT_ARCHIVE}+1
    MIAU=$(basename ${LIB})
    LIST=$(ar t ${LIB})
    IC=$(echo ${LIST} | wc -w)
    ARCHIVE_COUNT=${ARCHIVE_COUNT}+1

    declare -i IN=0

    for j in ${LIST}; do
        IN=${IN}+1
        ar x ${LIB} ${j}
        PERCENT=${IN}*100/${IC}
        echo -n "[${CURRENT_ARCHIVE}/${LIBCOUNT}] [${PERCENT}%] ${MIAU}:${j} - "
        ${FPRINTS} --fancy ${j} >>${OUTFILE}
        rm -f ${j}
        echo -ne "                   \r"
        FILE_COUNT=${FILE_COUNT}+1
    done
done

TMPFILE=tmptest-$$

echo 'main() {getuid();}' > ${TMPFILE}.c
gcc -static ${TMPFILE}.c -o ${TMPFILE} >/dev/null 2>&1
${FPRINTS} --fancy ${TMPFILE} 2>/dev/null >>${OUTFILE}
rm -f ${TMPFILE}.c ${TMPFILE}

FUNC_COUNT=$(grep -c . ${OUTFILE})

export ID="?"

sed 's/ __/ /g;s/_IO_//g;s/ _/ /g' ${OUTFILE} | \
    awk '{print "[" ENVIRON["ID"] "] " $2 " " $3}' | \
    sort | uniq | grep -vE 'free_mem|Letext' > ${TMPFILE}
mv ${TMPFILE} ${OUTFILE}

echo
echo "Read ${ARCHIVE_COUNT} archives, ${FILE_COUNT} files, found ${FUNC_COUNT} functions."

exit 0
